services:
  db:
    image: postgres:15-alpine
    container_name: aigent_postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s # Give it some time to start before first healthcheck

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: aigent_rabbitmq
    hostname: rabbitmq # Essential for Celery connection string
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "${RABBITMQ_PORT}:5672"   # AMQP port
      - "15672:15672" # Management plugin UI port (access via http://localhost:15672)
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q check_running"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  redis:
    image: redis:7-alpine
    container_name: aigent_redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build: ./backend
    container_name: aigent_backend
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be healthy...' &&
        # Simple wait loop or use a wait-for-it script
        # For now, depends_on with service_healthy should mostly cover this
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./backend:/app # Mounts host's backend directory to /app in container (for live code reload)
      - ./app.log:/app/app.log
      - ./error.log:/app/error.log
      - ./llm_interaction.log:/app/llm_interaction.log
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    # For Linux hosts, to allow containers to reach Ollama on host.docker.internal:
    # extra_hosts:
    #  - "host.docker.internal:host-gateway"

  celery_worker:
    build: ./backend
    container_name: aigent_celery_worker
    # -P gevent for async tasks. Concurrency can be tuned.
    # 'lba_project' will be the name of our Django project.
    command: celery -A lba_project worker -l info -P gevent --concurrency=4
    volumes:
      - ./backend:/app
      - ./app.log:/app/app.log # Share log files
      - ./error.log:/app/error.log
      - ./llm_interaction.log:/app/llm_interaction.log
    env_file:
      - .env
    depends_on:
      backend: # Ensures migrations run (from backend service) before worker starts full operation
        condition: service_started # or use a custom healthcheck on backend if needed
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    # extra_hosts: # Same as backend if needed
    #  - "host.docker.internal:host-gateway"

  celery_beat:
    build: ./backend
    container_name: aigent_celery_beat
    command: celery -A lba_project beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    # extra_hosts: # Same as backend if needed
    #  - "host.docker.internal:host-gateway"

  flower:
    image: mher/flower:2.0 # Or check for latest compatible version
    container_name: aigent_flower
    # CELERY_BROKER_URL is already defined in .env and loaded via env_file
    command: celery flower --broker=${CELERY_BROKER_URL} --basic_auth=${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5555:5555" # Access Flower UI via http://localhost:5555
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      celery_worker: # Wait for worker to be up
        condition: service_started

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data: