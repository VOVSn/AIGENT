services:
  db:
    image: postgres:15-alpine
    container_name: aigent_postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: aigent_rabbitmq
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q check_running"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  redis:
    image: redis:7-alpine
    container_name: aigent_redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # --- MODIFIED backend SERVICE ---
  backend:
    build: ./backend
    container_name: aigent_backend
    command: >
      sh -c "
        echo 'Backend container starting...' &&
        echo 'Waiting for PostgreSQL to be healthy...' &&
        # The 'depends_on' with 'condition: service_healthy' for 'db'
        # should ensure DB is ready, but an explicit wait can be added if needed.
        # For example, using a wait-for-it.sh script.
        # For now, relying on depends_on.

        echo 'Applying database migrations...' &&
        python manage.py migrate --noinput &&

        echo 'Running initial data seeding...' &&
        python manage.py seed_initial_data &&

        echo 'Starting Django development server...' &&
        python manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./backend:/app
      - ./app.log:/app/app.log
      - ./error.log:/app/error.log
      - ./llm_interaction.log:/app/llm_interaction.log
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    # For Linux hosts, to allow containers to reach Ollama on host.docker.internal:
    # extra_hosts:
    #  - "host.docker.internal:host-gateway"
  # --- END OF MODIFIED backend SERVICE ---

  celery_worker:
    build: ./backend
    container_name: aigent_celery_worker
    command: celery -A lba_project worker -l info -P gevent --concurrency=4
    volumes:
      - ./backend:/app
      - ./app.log:/app/app.log
      - ./error.log:/app/error.log
      - ./llm_interaction.log:/app/llm_interaction.log
    env_file:
      - .env
    depends_on:
      backend: # Ensures migrations run (from backend service) before worker starts
        condition: service_started # Changed to service_started as migrations are now part of backend's command
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    # extra_hosts:
    #  - "host.docker.internal:host-gateway"

  celery_beat:
    build: ./backend
    container_name: aigent_celery_beat
    command: celery -A lba_project beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      backend: # Ensures migrations run (from backend service) before beat starts
        condition: service_started # Changed to service_started
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    # extra_hosts:
    #  - "host.docker.internal:host-gateway"

  flower:
    image: mher/flower:2.0
    container_name: aigent_flower
    command: celery flower --broker=${CELERY_BROKER_URL} --basic_auth=${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5555:5555"
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      celery_worker:
        condition: service_started

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data: