# docker-compose.yml
services:
  #################################################
  # NGINX - PUBLIC ENTRYPOINT & FRONTEND SERVER
  #################################################
  nginx:
    build:
      context: ./frontend
    container_name: aigent_nginx
    ports:
      - "8080:80"
    volumes:
      - ./frontend/public:/usr/share/nginx/html:ro
      - ./nginx:/etc/nginx/conf.d:ro
      - static_volume:/var/www/static:ro
    depends_on:
      - backend

  #################################################
  # BACKEND - DJANGO API (UVICORN)
  #################################################
  backend:
    build: ./backend
    container_name: aigent_backend
    command: >
      sh -c "
        echo 'Backend container starting...' &&
        echo 'Waiting for dependencies to be healthy...' &&
        python manage.py migrate --noinput &&
        python manage.py collectstatic --noinput --clear &&
        python manage.py seed_initial_data --overwrite &&
        echo 'Starting Uvicorn server...' &&
        uvicorn lba_project.asgi:application --host 0.0.0.0 --port 8000
      "
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      searxng: # <-- ADDED
        condition: service_healthy
    extra_hosts:
     - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/admin/login/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  #################################################
  # CELERY WORKER & BEAT
  #################################################
  celery_worker:
    build: ./backend
    container_name: aigent_celery_worker
    command: celery -A lba_project worker -l info -P gevent --concurrency=4
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      searxng: # <-- ADDED
        condition: service_healthy
    extra_hosts:
     - "host.docker.internal:host-gateway"

  celery_beat:
    build: ./backend
    container_name: aigent_celery_beat
    command: celery -A lba_project beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    extra_hosts:
     - "host.docker.internal:host-gateway"

  #################################################
  # MONITORING & BACKING SERVICES
  #################################################
  flower:
    image: mher/flower:2.0
    container_name: aigent_flower
    command: celery flower --broker=${CELERY_BROKER_URL} --basic_auth=${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5555:5555"
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      celery_worker:
        condition: service_started

  db:
    image: postgres:15-alpine
    container_name: aigent_postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: aigent_rabbitmq
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q check_running"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  redis:
    image: redis:7-alpine
    container_name: aigent_redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  #################################################
  # NEW: SEARXNG SERVICE AND ITS REDIS
  #################################################
  searxng:
    image: searxng/searxng:latest
    container_name: aigent_searxng
    hostname: searxng
    volumes:
      - ./searxng:/etc/searxng:rw
    environment:
      - SEARXNG_BASE_URL=http://localhost:8080/
      - SEARXNG_SECRET_KEY=${DJANGO_SECRET_KEY}
    # No ports exposed to host by default, only internal access needed
    # You can add - "8888:8080" to access its UI for debugging
    depends_on:
      - searxng_redis
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --proxy=off http://localhost:8080 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  searxng_redis:
    image: redis:alpine
    container_name: aigent_searxng_redis
    hostname: searxng_redis
    command: redis-server --save "" --appendonly "no"
    tmpfs:
      - /var/lib/redis
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

#################################################
# VOLUMES
#################################################
volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
  static_volume:
  searxng: {} # Added volume for searxng config